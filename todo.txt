Streamy

Abstract

* overall of project, write last

Intro - What is this shit?

* Motivation
* Well documented case problem

Related Works - All the stuff we found and looked at

* BitTorrent
* WebRTC
* WebSockets
* Browserify/NodeJS (less important)
* HTML5
	- LocalStorage
	- audio tag
* Libraries
	- render-media (create audio tag from code)
	- music-metadata
	- localforage
	- request (easily send over http)
	- express (defines endpoints)
	- readable-blob-stream
	- magnet-uri
	- GUI elements (angular2, font-awesome, bootstrap, dragdrop)
* DHT
	- Different DHT systems found
		(WebRTC-explorer, WebRTC-chord, Kad-WebRTC)
* Popular music/media distribution systems
	- Spotify
	- Napster
	- Popcorn-time
 	- Netflix (transitioning to bittorrent)
	- File-sharing via torrents (sharing is caring)

Frameworks - Indepth about unusual libraries we used

* WebTorrent
* Browser vs desktop based (what is the difference?) 

Analysis - What we learned from looking at related works, 
	why were some were excluded?

* audio tag support and capabilities
* Why we use browser torrents
* Song information
* WebRTC
* Tracker vs Trackerless
* BitTorrent BEPs (BEP9, 17, 19, 27, 44)
* Scraping
* LocalStorage
	- Why not cookies
	- Why not IndexedDB/mysql
* DHT
	- Mocking vs fake-dht
	- Tested DHT systems
	- WebRTC-Explorer (issues with)
	- WebRTC-chord (issues with, unmaintained for 2 years)
	- Kad-WebRTC (issues with)
		+ bad support for < 3 nodes
		+ Resynchronization of key value paies (eventual constistency)

Design - About issues we ran into and how we got around them

* How should project demonstrate a solution/improvement to problem case?

* WebTorrent
	- How does WebTorrent decide who gets its bandwidth?

* Song encodings and metadata
* Audio tag limitations and workarounds
* LocalForage vs LocalStorage
	- LocalStorage limitations
	- Issues with LocalForage (blob vs buffer vs arraybuffer)
	- Workaround for localForage (save seperately)
* DHT
	- Issues with DHT on WebRTC
	- Why was it necessary to use faked dht?
		
* Granularity of torrents
	- download song, album or discography?

Implementation - About actual current codebase

* Browserify and why we use it.
* How we handle music and music metadata
	- Hidden audio-tag
* WebTorrent
	- When download?
	- When seed?
	- How is 
* Code Architecture
	- flow diagrams
	- file responsibility overview
	- Block Diagram
	- Seperation of concerns?
* Content Management System (Fake DHT implementation)
	- How we store songs (sha1 hash)
	- How we store other things (sha1:name)
	- How we maintain DHT content
* User Interface (Angular)

Evaluation - what did we learn from our project

* Analysis results
	- Capabilities compared to existing systems
	- Is it useful/not useful?
	- What does our system prove from research standpoint?

* What did we not implement?
	- Seeder eviction
	- Eviction strategies
	- Resource limitations
	- Bad Health supported properly?
	- Missing features on GUI (why there are unused GUI source code)
	- Fake DHT impl, what problems it causes
	- Missing trackerless feature
	- Could DHT and trackerless be implemented with more work?

* Quantifiable Tests (Reproducible) (performance, robustness)
	- CPU utilization when using/not using parts of project?
	- LocalStorage performance degredation?
	- Memory use?
	- Comparison with spotify/others
	- Reported traffic by webtorrent
		Is it correct+complete?

Conclusion - what can the content of this report be used for?

*

Manual

* Running remote (digitalocean server)
* Running local (docker, src)
* How to install
* How to run
* How to use

The Showcase - Show the project

* Video Demo
* Screenshots

Appendix

* Project Proposal - DONE
